GOCMD=go
GOTEST=$(GOCMD) test
GOVET=$(GOCMD) vet
BINARY_NAME=${{ values.name }}
VERSION?=0.0.0
SERVICE_PORT?=8080
ZIP=zip


GREEN  := $(shell tput -Txterm setaf 2)
YELLOW := $(shell tput -Txterm setaf 3)
WHITE  := $(shell tput -Txterm setaf 7)
CYAN   := $(shell tput -Txterm setaf 6)
RESET  := $(shell tput -Txterm sgr0)

.PHONY: all test build vendor

all: help

## Build:
build: ## Build your project and put the output binary in out/bin/
	$(MAKE) clean tidy download
	GOOS=linux GOARCH=amd64 $(GOCMD) build -ldflags="-X 'github.com/playsistemico/go-toolkit/build.HashCode=$(COMMIT_HASH)' -X 'github.com/playsistemico/go-toolkit/build.User=$(USER)'" -v -o $(BINARY_NAME) github.com/playsistemico/$(BINARY_NAME)/cmd/$(BINARY_NAME)
	$(ZIP) $(BINARY_NAME).zip $(BINARY_NAME)

run: ## executes the binary
ifeq ($(shell test -s $(BINARY_NAME) && echo -n yes),yes)
	echo "file exists"
else
	$(MAKE) build
endif
	./$(BINARY_NAME)


clean: ## Remove build related file
	rm -fr ./bin
	rm -fr ./out
	rm -f $(BINARY_NAME)
	rm -f $(BINARY_NAME).zip

download: ## Download of all packages needed to support builds and tests
	$(GOCMD) mod download

tidy: ## Tidy makes sure go.mod matches the source code in the module.
	$(GOCMD) mod tidy

vendor: ## Copy of all packages needed to support builds and tests in the vendor directory
	$(GOCMD) mod vendor

watch: ## Run the code with cosmtrek/air to have automatic reload on changes
	$(eval PACKAGE_NAME=$(shell head -n 1 go.mod | cut -d ' ' -f2))
	docker run -it --rm -w /go/src/$(PACKAGE_NAME) -v $(shell pwd):/go/src/$(PACKAGE_NAME) -p $(SERVICE_PORT):$(SERVICE_PORT) cosmtrek/air

## Test:
tests: test-coverage

test: ## Run the tests of the project
	$(GOTEST) -v -race ./...

test-coverage: ## Run the tests of the project and export the coverage
	mkdir -p out/reports
	$(GOTEST) -v -race -cover -covermode=atomic -coverprofile=out/reports/profile.cov ./...
	$(GOCMD) tool cover -func out/reports/profile.cov

## Lint:
linter: lint-go ## Run all available linters

lint-go: ## Use golintci-lint on your project
	mkdir -p out/reports
	docker run --rm -v $(shell pwd):/app -w /app golangci/golangci-lint:latest-alpine golangci-lint run --deadline=65s

## Docker:
docker-build: ## Use the dockerfile to build the container
	docker build --rm --tag $(BINARY_NAME) .

## Deploy:
deploy-local: ## Use awslocal to deploy lambda function
	@awslocal lambda delete-function \
		--function-name $(BINARY_NAME)
	@echo "Uploading zip to localstack..."
	@awslocal lambda create-function \
		--function-name $(BINARY_NAME) \
		--runtime go1.x \
		--role arn:aws:iam::123456::role/irrelevant \
		--handler main \
		--zip-file fileb://$(BINARY_NAME).zip
	@echo "Done"

## Help:
help: ## Show this help.
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} { \
		if (/^[a-zA-Z_-]+:.*?##.*$$/) {printf "    ${YELLOW}%-20s${GREEN}%s${RESET}\n", $$1, $$2} \
		else if (/^## .*$$/) {printf "  ${CYAN}%s${RESET}\n", substr($$1,4)} \
		}' $(MAKEFILE_LIST)